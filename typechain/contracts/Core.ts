/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../common";

export declare namespace DataTypes {
  export type PolicyStruct = {
    id: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    payout: PromiseOrValue<BigNumberish>;
    premium: PromiseOrValue<BigNumberish>;
    threshold: PromiseOrValue<BigNumberish>;
    insured: PromiseOrValue<string>;
    utilized: PromiseOrValue<boolean>;
    asset: PromiseOrValue<string>;
  };

  export type PolicyStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    boolean,
    string
  ] & {
    id: BigNumber;
    endTime: BigNumber;
    payout: BigNumber;
    premium: BigNumber;
    threshold: BigNumber;
    insured: string;
    utilized: boolean;
    asset: string;
  };
}

export interface CoreInterface extends utils.Interface {
  functions: {
    "executeClaim(uint256)": FunctionFragment;
    "executeInsure(string,uint256,uint256,uint256,uint256,address)": FunctionFragment;
    "executeUnlock(uint256)": FunctionFragment;
    "feeCollector()": FunctionFragment;
    "fundsToUnlock(uint256)": FunctionFragment;
    "getPolicy(uint256)": FunctionFragment;
    "initAsset(string)": FunctionFragment;
    "initialize(address,address,address,address,address,address)": FunctionFragment;
    "isAssetSupported(string)": FunctionFragment;
    "isFreezed()": FunctionFragment;
    "lockedAssets()": FunctionFragment;
    "policyCount()": FunctionFragment;
    "pool()": FunctionFragment;
    "proxiableUUID()": FunctionFragment;
    "setFeeCollector(address)": FunctionFragment;
    "setFreezed(bool)": FunctionFragment;
    "upgradeTo(address)": FunctionFragment;
    "upgradeToAndCall(address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "executeClaim"
      | "executeInsure"
      | "executeUnlock"
      | "feeCollector"
      | "fundsToUnlock"
      | "getPolicy"
      | "initAsset"
      | "initialize"
      | "isAssetSupported"
      | "isFreezed"
      | "lockedAssets"
      | "policyCount"
      | "pool"
      | "proxiableUUID"
      | "setFeeCollector"
      | "setFreezed"
      | "upgradeTo"
      | "upgradeToAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "executeClaim",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "executeInsure",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<BigNumberish>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "executeUnlock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "feeCollector",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "fundsToUnlock",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "getPolicy",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(
    functionFragment: "initAsset",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "initialize",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<string>
    ]
  ): string;
  encodeFunctionData(
    functionFragment: "isAssetSupported",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(functionFragment: "isFreezed", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "lockedAssets",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "policyCount",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "pool", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "proxiableUUID",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeCollector",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFreezed",
    values: [PromiseOrValue<boolean>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeTo",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeToAndCall",
    values: [PromiseOrValue<string>, PromiseOrValue<BytesLike>]
  ): string;

  decodeFunctionResult(
    functionFragment: "executeClaim",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeInsure",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "executeUnlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "feeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "fundsToUnlock",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getPolicy", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initAsset", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "initialize", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "isAssetSupported",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "isFreezed", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "lockedAssets",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "policyCount",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "pool", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "proxiableUUID",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setFeeCollector",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setFreezed", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "upgradeTo", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeToAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AdminChanged(address,address)": EventFragment;
    "AssetInitialized(string)": EventFragment;
    "BeaconUpgraded(address)": EventFragment;
    "FeeCollectorUpdated(address)": EventFragment;
    "Freezed(bool)": EventFragment;
    "Initialized(uint8)": EventFragment;
    "PoolDeployed(address)": EventFragment;
    "Unlocked(uint256,uint256)": EventFragment;
    "Upgraded(address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AdminChanged"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "AssetInitialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "BeaconUpgraded"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeCollectorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Freezed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Initialized"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PoolDeployed"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unlocked"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Upgraded"): EventFragment;
}

export interface AdminChangedEventObject {
  previousAdmin: string;
  newAdmin: string;
}
export type AdminChangedEvent = TypedEvent<
  [string, string],
  AdminChangedEventObject
>;

export type AdminChangedEventFilter = TypedEventFilter<AdminChangedEvent>;

export interface AssetInitializedEventObject {
  asset: string;
}
export type AssetInitializedEvent = TypedEvent<
  [string],
  AssetInitializedEventObject
>;

export type AssetInitializedEventFilter =
  TypedEventFilter<AssetInitializedEvent>;

export interface BeaconUpgradedEventObject {
  beacon: string;
}
export type BeaconUpgradedEvent = TypedEvent<
  [string],
  BeaconUpgradedEventObject
>;

export type BeaconUpgradedEventFilter = TypedEventFilter<BeaconUpgradedEvent>;

export interface FeeCollectorUpdatedEventObject {
  newFeeCollector: string;
}
export type FeeCollectorUpdatedEvent = TypedEvent<
  [string],
  FeeCollectorUpdatedEventObject
>;

export type FeeCollectorUpdatedEventFilter =
  TypedEventFilter<FeeCollectorUpdatedEvent>;

export interface FreezedEventObject {
  freezed: boolean;
}
export type FreezedEvent = TypedEvent<[boolean], FreezedEventObject>;

export type FreezedEventFilter = TypedEventFilter<FreezedEvent>;

export interface InitializedEventObject {
  version: number;
}
export type InitializedEvent = TypedEvent<[number], InitializedEventObject>;

export type InitializedEventFilter = TypedEventFilter<InitializedEvent>;

export interface PoolDeployedEventObject {
  pool: string;
}
export type PoolDeployedEvent = TypedEvent<[string], PoolDeployedEventObject>;

export type PoolDeployedEventFilter = TypedEventFilter<PoolDeployedEvent>;

export interface UnlockedEventObject {
  timestamp: BigNumber;
  amount: BigNumber;
}
export type UnlockedEvent = TypedEvent<
  [BigNumber, BigNumber],
  UnlockedEventObject
>;

export type UnlockedEventFilter = TypedEventFilter<UnlockedEvent>;

export interface UpgradedEventObject {
  implementation: string;
}
export type UpgradedEvent = TypedEvent<[string], UpgradedEventObject>;

export type UpgradedEventFilter = TypedEventFilter<UpgradedEvent>;

export interface Core extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CoreInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    executeClaim(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeInsure(
      asset: PromiseOrValue<string>,
      endTime: PromiseOrValue<BigNumberish>,
      premium: PromiseOrValue<BigNumberish>,
      payout: PromiseOrValue<BigNumberish>,
      threshold: PromiseOrValue<BigNumberish>,
      reciever: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    executeUnlock(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<[string]>;

    fundsToUnlock(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getPolicy(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[DataTypes.PolicyStructOutput]>;

    initAsset(
      asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    initialize(
      accessController_: PromiseOrValue<string>,
      feeCollector_: PromiseOrValue<string>,
      poolImplementation_: PromiseOrValue<string>,
      usdc_: PromiseOrValue<string>,
      oracle_: PromiseOrValue<string>,
      premiumEngine_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    isAssetSupported(
      assetSymbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[boolean]>;

    isFreezed(overrides?: CallOverrides): Promise<[boolean]>;

    lockedAssets(overrides?: CallOverrides): Promise<[BigNumber]>;

    policyCount(overrides?: CallOverrides): Promise<[BigNumber]>;

    pool(overrides?: CallOverrides): Promise<[string]>;

    proxiableUUID(overrides?: CallOverrides): Promise<[string]>;

    setFeeCollector(
      feeCollector_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFreezed(
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  executeClaim(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeInsure(
    asset: PromiseOrValue<string>,
    endTime: PromiseOrValue<BigNumberish>,
    premium: PromiseOrValue<BigNumberish>,
    payout: PromiseOrValue<BigNumberish>,
    threshold: PromiseOrValue<BigNumberish>,
    reciever: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  executeUnlock(
    timestamp: PromiseOrValue<BigNumberish>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  feeCollector(overrides?: CallOverrides): Promise<string>;

  fundsToUnlock(
    arg0: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getPolicy(
    policyId: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<DataTypes.PolicyStructOutput>;

  initAsset(
    asset: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  initialize(
    accessController_: PromiseOrValue<string>,
    feeCollector_: PromiseOrValue<string>,
    poolImplementation_: PromiseOrValue<string>,
    usdc_: PromiseOrValue<string>,
    oracle_: PromiseOrValue<string>,
    premiumEngine_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  isAssetSupported(
    assetSymbol: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<boolean>;

  isFreezed(overrides?: CallOverrides): Promise<boolean>;

  lockedAssets(overrides?: CallOverrides): Promise<BigNumber>;

  policyCount(overrides?: CallOverrides): Promise<BigNumber>;

  pool(overrides?: CallOverrides): Promise<string>;

  proxiableUUID(overrides?: CallOverrides): Promise<string>;

  setFeeCollector(
    feeCollector_: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFreezed(
    status: PromiseOrValue<boolean>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeTo(
    newImplementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeToAndCall(
    newImplementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    executeClaim(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    executeInsure(
      asset: PromiseOrValue<string>,
      endTime: PromiseOrValue<BigNumberish>,
      premium: PromiseOrValue<BigNumberish>,
      payout: PromiseOrValue<BigNumberish>,
      threshold: PromiseOrValue<BigNumberish>,
      reciever: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    executeUnlock(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<void>;

    feeCollector(overrides?: CallOverrides): Promise<string>;

    fundsToUnlock(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPolicy(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<DataTypes.PolicyStructOutput>;

    initAsset(
      asset: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    initialize(
      accessController_: PromiseOrValue<string>,
      feeCollector_: PromiseOrValue<string>,
      poolImplementation_: PromiseOrValue<string>,
      usdc_: PromiseOrValue<string>,
      oracle_: PromiseOrValue<string>,
      premiumEngine_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    isAssetSupported(
      assetSymbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<boolean>;

    isFreezed(overrides?: CallOverrides): Promise<boolean>;

    lockedAssets(overrides?: CallOverrides): Promise<BigNumber>;

    policyCount(overrides?: CallOverrides): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<string>;

    proxiableUUID(overrides?: CallOverrides): Promise<string>;

    setFeeCollector(
      feeCollector_: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFreezed(
      status: PromiseOrValue<boolean>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AdminChanged(address,address)"(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;
    AdminChanged(
      previousAdmin?: null,
      newAdmin?: null
    ): AdminChangedEventFilter;

    "AssetInitialized(string)"(asset?: null): AssetInitializedEventFilter;
    AssetInitialized(asset?: null): AssetInitializedEventFilter;

    "BeaconUpgraded(address)"(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;
    BeaconUpgraded(
      beacon?: PromiseOrValue<string> | null
    ): BeaconUpgradedEventFilter;

    "FeeCollectorUpdated(address)"(
      newFeeCollector?: PromiseOrValue<string> | null
    ): FeeCollectorUpdatedEventFilter;
    FeeCollectorUpdated(
      newFeeCollector?: PromiseOrValue<string> | null
    ): FeeCollectorUpdatedEventFilter;

    "Freezed(bool)"(freezed?: null): FreezedEventFilter;
    Freezed(freezed?: null): FreezedEventFilter;

    "Initialized(uint8)"(version?: null): InitializedEventFilter;
    Initialized(version?: null): InitializedEventFilter;

    "PoolDeployed(address)"(pool?: null): PoolDeployedEventFilter;
    PoolDeployed(pool?: null): PoolDeployedEventFilter;

    "Unlocked(uint256,uint256)"(
      timestamp?: null,
      amount?: null
    ): UnlockedEventFilter;
    Unlocked(timestamp?: null, amount?: null): UnlockedEventFilter;

    "Upgraded(address)"(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
    Upgraded(
      implementation?: PromiseOrValue<string> | null
    ): UpgradedEventFilter;
  };

  estimateGas: {
    executeClaim(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeInsure(
      asset: PromiseOrValue<string>,
      endTime: PromiseOrValue<BigNumberish>,
      premium: PromiseOrValue<BigNumberish>,
      payout: PromiseOrValue<BigNumberish>,
      threshold: PromiseOrValue<BigNumberish>,
      reciever: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    executeUnlock(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    feeCollector(overrides?: CallOverrides): Promise<BigNumber>;

    fundsToUnlock(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getPolicy(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    initAsset(
      asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    initialize(
      accessController_: PromiseOrValue<string>,
      feeCollector_: PromiseOrValue<string>,
      poolImplementation_: PromiseOrValue<string>,
      usdc_: PromiseOrValue<string>,
      oracle_: PromiseOrValue<string>,
      premiumEngine_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    isAssetSupported(
      assetSymbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    isFreezed(overrides?: CallOverrides): Promise<BigNumber>;

    lockedAssets(overrides?: CallOverrides): Promise<BigNumber>;

    policyCount(overrides?: CallOverrides): Promise<BigNumber>;

    pool(overrides?: CallOverrides): Promise<BigNumber>;

    proxiableUUID(overrides?: CallOverrides): Promise<BigNumber>;

    setFeeCollector(
      feeCollector_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFreezed(
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    executeClaim(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeInsure(
      asset: PromiseOrValue<string>,
      endTime: PromiseOrValue<BigNumberish>,
      premium: PromiseOrValue<BigNumberish>,
      payout: PromiseOrValue<BigNumberish>,
      threshold: PromiseOrValue<BigNumberish>,
      reciever: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    executeUnlock(
      timestamp: PromiseOrValue<BigNumberish>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    feeCollector(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    fundsToUnlock(
      arg0: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPolicy(
      policyId: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    initAsset(
      asset: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    initialize(
      accessController_: PromiseOrValue<string>,
      feeCollector_: PromiseOrValue<string>,
      poolImplementation_: PromiseOrValue<string>,
      usdc_: PromiseOrValue<string>,
      oracle_: PromiseOrValue<string>,
      premiumEngine_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    isAssetSupported(
      assetSymbol: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    isFreezed(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lockedAssets(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    policyCount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    proxiableUUID(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setFeeCollector(
      feeCollector_: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFreezed(
      status: PromiseOrValue<boolean>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeTo(
      newImplementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeToAndCall(
      newImplementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
