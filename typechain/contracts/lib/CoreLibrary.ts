/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export declare namespace CoreLibrary {
  export type PolicyStruct = {
    id: PromiseOrValue<BigNumberish>;
    premium: PromiseOrValue<BigNumberish>;
    payOutAmount: PromiseOrValue<BigNumberish>;
    assetValue: PromiseOrValue<BigNumberish>;
    endTime: PromiseOrValue<BigNumberish>;
    insured: PromiseOrValue<string>;
    threshold: PromiseOrValue<BigNumberish>;
    utilized: PromiseOrValue<boolean>;
    asset: PromiseOrValue<string>;
  };

  export type PolicyStructOutput = [
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    BigNumber,
    string,
    number,
    boolean,
    string
  ] & {
    id: BigNumber;
    premium: BigNumber;
    payOutAmount: BigNumber;
    assetValue: BigNumber;
    endTime: BigNumber;
    insured: string;
    threshold: number;
    utilized: boolean;
    asset: string;
  };
}

export interface CoreLibraryInterface extends utils.Interface {
  functions: {
    "isActive((uint256,uint256,uint256,uint256,uint256,address,uint8,bool,string))": FunctionFragment;
  };

  getFunction(nameOrSignatureOrTopic: "isActive"): FunctionFragment;

  encodeFunctionData(functionFragment: "isActive", values: [CoreLibrary.PolicyStruct]): string;

  decodeFunctionResult(functionFragment: "isActive", data: BytesLike): Result;

  events: {};
}

export interface CoreLibrary extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: CoreLibraryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    isActive(policy: CoreLibrary.PolicyStruct, overrides?: CallOverrides): Promise<[boolean]>;
  };

  isActive(policy: CoreLibrary.PolicyStruct, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    isActive(policy: CoreLibrary.PolicyStruct, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    isActive(policy: CoreLibrary.PolicyStruct, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    isActive(
      policy: CoreLibrary.PolicyStruct,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;
  };
}
