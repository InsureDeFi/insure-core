/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type { BaseContract, BigNumber, BigNumberish, Signer, utils } from "ethers";
import type { EventFragment } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface IRiskPoolInterface extends utils.Interface {
  functions: {};

  events: {
    "Insured(address,uint256,string,uint256,uint256,uint256,uint256,uint256,uint8)": EventFragment;
    "PolicyPaid(uint256)": EventFragment;
    "Unlocked(uint256,uint256)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "Insured"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PolicyPaid"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "Unlocked"): EventFragment;
}

export interface InsuredEventObject {
  insured: string;
  policyId: BigNumber;
  asset: string;
  currentAssetPrice: BigNumber;
  payOutAmount: BigNumber;
  premium: BigNumber;
  protocolFee: BigNumber;
  endTime: BigNumber;
  threshold: number;
}
export type InsuredEvent = TypedEvent<
  [string, BigNumber, string, BigNumber, BigNumber, BigNumber, BigNumber, BigNumber, number],
  InsuredEventObject
>;

export type InsuredEventFilter = TypedEventFilter<InsuredEvent>;

export interface PolicyPaidEventObject {
  policyId: BigNumber;
}
export type PolicyPaidEvent = TypedEvent<[BigNumber], PolicyPaidEventObject>;

export type PolicyPaidEventFilter = TypedEventFilter<PolicyPaidEvent>;

export interface UnlockedEventObject {
  timestamp: BigNumber;
  assetsUnlocked: BigNumber;
}
export type UnlockedEvent = TypedEvent<[BigNumber, BigNumber], UnlockedEventObject>;

export type UnlockedEventFilter = TypedEventFilter<UnlockedEvent>;

export interface IRiskPool extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IRiskPoolInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {};

  callStatic: {};

  filters: {
    "Insured(address,uint256,string,uint256,uint256,uint256,uint256,uint256,uint8)"(
      insured?: PromiseOrValue<string> | null,
      policyId?: null,
      asset?: null,
      currentAssetPrice?: null,
      payOutAmount?: null,
      premium?: null,
      protocolFee?: null,
      endTime?: null,
      threshold?: null
    ): InsuredEventFilter;
    Insured(
      insured?: PromiseOrValue<string> | null,
      policyId?: null,
      asset?: null,
      currentAssetPrice?: null,
      payOutAmount?: null,
      premium?: null,
      protocolFee?: null,
      endTime?: null,
      threshold?: null
    ): InsuredEventFilter;

    "PolicyPaid(uint256)"(policyId?: PromiseOrValue<BigNumberish> | null): PolicyPaidEventFilter;
    PolicyPaid(policyId?: PromiseOrValue<BigNumberish> | null): PolicyPaidEventFilter;

    "Unlocked(uint256,uint256)"(timestamp?: null, assetsUnlocked?: null): UnlockedEventFilter;
    Unlocked(timestamp?: null, assetsUnlocked?: null): UnlockedEventFilter;
  };

  estimateGas: {};

  populateTransaction: {};
}
