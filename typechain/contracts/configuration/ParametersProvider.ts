/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type { FunctionFragment, Result } from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface ParametersProviderInterface extends utils.Interface {
  functions: {
    "PARAMETERS_PROVIDER_REVISION()": FunctionFragment;
    "calculateProtocolFee(uint256)": FunctionFragment;
    "getMinCoverAmount()": FunctionFragment;
    "getPayOutThreshold()": FunctionFragment;
    "getProtocolFee()": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "PARAMETERS_PROVIDER_REVISION"
      | "calculateProtocolFee"
      | "getMinCoverAmount"
      | "getPayOutThreshold"
      | "getProtocolFee"
  ): FunctionFragment;

  encodeFunctionData(functionFragment: "PARAMETERS_PROVIDER_REVISION", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "calculateProtocolFee",
    values: [PromiseOrValue<BigNumberish>]
  ): string;
  encodeFunctionData(functionFragment: "getMinCoverAmount", values?: undefined): string;
  encodeFunctionData(functionFragment: "getPayOutThreshold", values?: undefined): string;
  encodeFunctionData(functionFragment: "getProtocolFee", values?: undefined): string;

  decodeFunctionResult(functionFragment: "PARAMETERS_PROVIDER_REVISION", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "calculateProtocolFee", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getMinCoverAmount", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getPayOutThreshold", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getProtocolFee", data: BytesLike): Result;

  events: {};
}

export interface ParametersProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ParametersProviderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    PARAMETERS_PROVIDER_REVISION(overrides?: CallOverrides): Promise<[BigNumber]>;

    calculateProtocolFee(
      premium: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<[BigNumber]>;

    getMinCoverAmount(overrides?: CallOverrides): Promise<[BigNumber]>;

    getPayOutThreshold(overrides?: CallOverrides): Promise<[number]>;

    getProtocolFee(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  PARAMETERS_PROVIDER_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

  calculateProtocolFee(
    premium: PromiseOrValue<BigNumberish>,
    overrides?: CallOverrides
  ): Promise<BigNumber>;

  getMinCoverAmount(overrides?: CallOverrides): Promise<BigNumber>;

  getPayOutThreshold(overrides?: CallOverrides): Promise<number>;

  getProtocolFee(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    PARAMETERS_PROVIDER_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    calculateProtocolFee(
      premium: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinCoverAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getPayOutThreshold(overrides?: CallOverrides): Promise<number>;

    getProtocolFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {};

  estimateGas: {
    PARAMETERS_PROVIDER_REVISION(overrides?: CallOverrides): Promise<BigNumber>;

    calculateProtocolFee(
      premium: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getMinCoverAmount(overrides?: CallOverrides): Promise<BigNumber>;

    getPayOutThreshold(overrides?: CallOverrides): Promise<BigNumber>;

    getProtocolFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    PARAMETERS_PROVIDER_REVISION(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    calculateProtocolFee(
      premium: PromiseOrValue<BigNumberish>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getMinCoverAmount(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPayOutThreshold(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProtocolFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
