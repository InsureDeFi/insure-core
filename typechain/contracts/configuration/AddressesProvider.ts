/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from "ethers";
import type {
  FunctionFragment,
  Result,
  EventFragment,
} from "@ethersproject/abi";
import type { Listener, Provider } from "@ethersproject/providers";
import type {
  TypedEventFilter,
  TypedEvent,
  TypedListener,
  OnEvent,
  PromiseOrValue,
} from "../../common";

export interface AddressesProviderInterface extends utils.Interface {
  functions: {
    "changeProxyAdmin(address,address)": FunctionFragment;
    "getAddress(bytes32)": FunctionFragment;
    "getFeeDistributor()": FunctionFragment;
    "getParametersProvider()": FunctionFragment;
    "getPremiumEngine()": FunctionFragment;
    "getPriceOracle()": FunctionFragment;
    "getProxyAdmin(address)": FunctionFragment;
    "getProxyImplementation(address)": FunctionFragment;
    "getRiskPool()": FunctionFragment;
    "getRiskPoolCore()": FunctionFragment;
    "getRiskPoolManager()": FunctionFragment;
    "owner()": FunctionFragment;
    "renounceOwnership()": FunctionFragment;
    "setAddress(bytes32,address)": FunctionFragment;
    "setFeeDistributor(address)": FunctionFragment;
    "setParametersProvider(address)": FunctionFragment;
    "setPremiumEngine(address)": FunctionFragment;
    "setPriceOracle(address)": FunctionFragment;
    "setRiskPool(address)": FunctionFragment;
    "setRiskPoolCore(address)": FunctionFragment;
    "setRiskPoolManager(address)": FunctionFragment;
    "transferOwnership(address)": FunctionFragment;
    "upgrade(address,address)": FunctionFragment;
    "upgradeAndCall(address,address,bytes)": FunctionFragment;
  };

  getFunction(
    nameOrSignatureOrTopic:
      | "changeProxyAdmin"
      | "getAddress"
      | "getFeeDistributor"
      | "getParametersProvider"
      | "getPremiumEngine"
      | "getPriceOracle"
      | "getProxyAdmin"
      | "getProxyImplementation"
      | "getRiskPool"
      | "getRiskPoolCore"
      | "getRiskPoolManager"
      | "owner"
      | "renounceOwnership"
      | "setAddress"
      | "setFeeDistributor"
      | "setParametersProvider"
      | "setPremiumEngine"
      | "setPriceOracle"
      | "setRiskPool"
      | "setRiskPoolCore"
      | "setRiskPoolManager"
      | "transferOwnership"
      | "upgrade"
      | "upgradeAndCall"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "changeProxyAdmin",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getAddress",
    values: [PromiseOrValue<BytesLike>]
  ): string;
  encodeFunctionData(
    functionFragment: "getFeeDistributor",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getParametersProvider",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPremiumEngine",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getPriceOracle",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getProxyAdmin",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getProxyImplementation",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "getRiskPool",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRiskPoolCore",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "getRiskPoolManager",
    values?: undefined
  ): string;
  encodeFunctionData(functionFragment: "owner", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "renounceOwnership",
    values?: undefined
  ): string;
  encodeFunctionData(
    functionFragment: "setAddress",
    values: [PromiseOrValue<BytesLike>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setFeeDistributor",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setParametersProvider",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPremiumEngine",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setPriceOracle",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRiskPool",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRiskPoolCore",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "setRiskPoolManager",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "transferOwnership",
    values: [PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgrade",
    values: [PromiseOrValue<string>, PromiseOrValue<string>]
  ): string;
  encodeFunctionData(
    functionFragment: "upgradeAndCall",
    values: [
      PromiseOrValue<string>,
      PromiseOrValue<string>,
      PromiseOrValue<BytesLike>
    ]
  ): string;

  decodeFunctionResult(
    functionFragment: "changeProxyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "getAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "getFeeDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getParametersProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPremiumEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProxyAdmin",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getProxyImplementation",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRiskPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRiskPoolCore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "getRiskPoolManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "owner", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "renounceOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "setAddress", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "setFeeDistributor",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setParametersProvider",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPremiumEngine",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setPriceOracle",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRiskPool",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRiskPoolCore",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "setRiskPoolManager",
    data: BytesLike
  ): Result;
  decodeFunctionResult(
    functionFragment: "transferOwnership",
    data: BytesLike
  ): Result;
  decodeFunctionResult(functionFragment: "upgrade", data: BytesLike): Result;
  decodeFunctionResult(
    functionFragment: "upgradeAndCall",
    data: BytesLike
  ): Result;

  events: {
    "AddressSet(bytes32,address,address)": EventFragment;
    "FeeDistributorUpdated(address,address)": EventFragment;
    "OwnershipTransferred(address,address)": EventFragment;
    "ParametersProviderUpdated(address,address)": EventFragment;
    "PremiumEngineUpdated(address,address)": EventFragment;
    "PriceOracleUpdated(address,address)": EventFragment;
    "RiskPoolCoreUpdated(address,address)": EventFragment;
    "RiskPoolManagerUpdated(address,address)": EventFragment;
    "RiskPoolUpdated(address,address)": EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: "AddressSet"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "FeeDistributorUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "OwnershipTransferred"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "ParametersProviderUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PremiumEngineUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "PriceOracleUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RiskPoolCoreUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RiskPoolManagerUpdated"): EventFragment;
  getEvent(nameOrSignatureOrTopic: "RiskPoolUpdated"): EventFragment;
}

export interface AddressSetEventObject {
  key: string;
  oldAddress: string;
  newAddress: string;
}
export type AddressSetEvent = TypedEvent<
  [string, string, string],
  AddressSetEventObject
>;

export type AddressSetEventFilter = TypedEventFilter<AddressSetEvent>;

export interface FeeDistributorUpdatedEventObject {
  oldAddress: string;
  newAddress: string;
}
export type FeeDistributorUpdatedEvent = TypedEvent<
  [string, string],
  FeeDistributorUpdatedEventObject
>;

export type FeeDistributorUpdatedEventFilter =
  TypedEventFilter<FeeDistributorUpdatedEvent>;

export interface OwnershipTransferredEventObject {
  previousOwner: string;
  newOwner: string;
}
export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  OwnershipTransferredEventObject
>;

export type OwnershipTransferredEventFilter =
  TypedEventFilter<OwnershipTransferredEvent>;

export interface ParametersProviderUpdatedEventObject {
  oldAddress: string;
  newAddress: string;
}
export type ParametersProviderUpdatedEvent = TypedEvent<
  [string, string],
  ParametersProviderUpdatedEventObject
>;

export type ParametersProviderUpdatedEventFilter =
  TypedEventFilter<ParametersProviderUpdatedEvent>;

export interface PremiumEngineUpdatedEventObject {
  oldAddress: string;
  newAddress: string;
}
export type PremiumEngineUpdatedEvent = TypedEvent<
  [string, string],
  PremiumEngineUpdatedEventObject
>;

export type PremiumEngineUpdatedEventFilter =
  TypedEventFilter<PremiumEngineUpdatedEvent>;

export interface PriceOracleUpdatedEventObject {
  oldAddress: string;
  newAddress: string;
}
export type PriceOracleUpdatedEvent = TypedEvent<
  [string, string],
  PriceOracleUpdatedEventObject
>;

export type PriceOracleUpdatedEventFilter =
  TypedEventFilter<PriceOracleUpdatedEvent>;

export interface RiskPoolCoreUpdatedEventObject {
  oldAddress: string;
  newAddress: string;
}
export type RiskPoolCoreUpdatedEvent = TypedEvent<
  [string, string],
  RiskPoolCoreUpdatedEventObject
>;

export type RiskPoolCoreUpdatedEventFilter =
  TypedEventFilter<RiskPoolCoreUpdatedEvent>;

export interface RiskPoolManagerUpdatedEventObject {
  oldAddress: string;
  newAddress: string;
}
export type RiskPoolManagerUpdatedEvent = TypedEvent<
  [string, string],
  RiskPoolManagerUpdatedEventObject
>;

export type RiskPoolManagerUpdatedEventFilter =
  TypedEventFilter<RiskPoolManagerUpdatedEvent>;

export interface RiskPoolUpdatedEventObject {
  oldAddress: string;
  newAddress: string;
}
export type RiskPoolUpdatedEvent = TypedEvent<
  [string, string],
  RiskPoolUpdatedEventObject
>;

export type RiskPoolUpdatedEventFilter = TypedEventFilter<RiskPoolUpdatedEvent>;

export interface AddressesProvider extends BaseContract {
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: AddressesProviderInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(
    eventFilter?: TypedEventFilter<TEvent>
  ): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(
    eventFilter: TypedEventFilter<TEvent>
  ): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    changeProxyAdmin(
      proxy: PromiseOrValue<string>,
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    getAddress(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getFeeDistributor(overrides?: CallOverrides): Promise<[string]>;

    getParametersProvider(overrides?: CallOverrides): Promise<[string]>;

    getPremiumEngine(overrides?: CallOverrides): Promise<[string]>;

    getPriceOracle(overrides?: CallOverrides): Promise<[string]>;

    getProxyAdmin(
      proxy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getProxyImplementation(
      proxy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<[string]>;

    getRiskPool(overrides?: CallOverrides): Promise<[string]>;

    getRiskPoolCore(overrides?: CallOverrides): Promise<[string]>;

    getRiskPoolManager(overrides?: CallOverrides): Promise<[string]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setAddress(
      key: PromiseOrValue<BytesLike>,
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setFeeDistributor(
      newFeeDistributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setParametersProvider(
      newParametersProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPremiumEngine(
      newPremiumEngine: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setPriceOracle(
      newPriceOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRiskPool(
      newRiskPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRiskPoolCore(
      newRiskPoolCore: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    setRiskPoolManager(
      newRiskPoolManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgrade(
      proxy: PromiseOrValue<string>,
      implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;

    upgradeAndCall(
      proxy: PromiseOrValue<string>,
      implementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<ContractTransaction>;
  };

  changeProxyAdmin(
    proxy: PromiseOrValue<string>,
    newAdmin: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  getAddress(
    key: PromiseOrValue<BytesLike>,
    overrides?: CallOverrides
  ): Promise<string>;

  getFeeDistributor(overrides?: CallOverrides): Promise<string>;

  getParametersProvider(overrides?: CallOverrides): Promise<string>;

  getPremiumEngine(overrides?: CallOverrides): Promise<string>;

  getPriceOracle(overrides?: CallOverrides): Promise<string>;

  getProxyAdmin(
    proxy: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getProxyImplementation(
    proxy: PromiseOrValue<string>,
    overrides?: CallOverrides
  ): Promise<string>;

  getRiskPool(overrides?: CallOverrides): Promise<string>;

  getRiskPoolCore(overrides?: CallOverrides): Promise<string>;

  getRiskPoolManager(overrides?: CallOverrides): Promise<string>;

  owner(overrides?: CallOverrides): Promise<string>;

  renounceOwnership(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setAddress(
    key: PromiseOrValue<BytesLike>,
    newAddress: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setFeeDistributor(
    newFeeDistributor: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setParametersProvider(
    newParametersProvider: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPremiumEngine(
    newPremiumEngine: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setPriceOracle(
    newPriceOracle: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRiskPool(
    newRiskPool: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRiskPoolCore(
    newRiskPoolCore: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  setRiskPoolManager(
    newRiskPoolManager: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgrade(
    proxy: PromiseOrValue<string>,
    implementation: PromiseOrValue<string>,
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  upgradeAndCall(
    proxy: PromiseOrValue<string>,
    implementation: PromiseOrValue<string>,
    data: PromiseOrValue<BytesLike>,
    overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
  ): Promise<ContractTransaction>;

  callStatic: {
    changeProxyAdmin(
      proxy: PromiseOrValue<string>,
      newAdmin: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    getAddress(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<string>;

    getFeeDistributor(overrides?: CallOverrides): Promise<string>;

    getParametersProvider(overrides?: CallOverrides): Promise<string>;

    getPremiumEngine(overrides?: CallOverrides): Promise<string>;

    getPriceOracle(overrides?: CallOverrides): Promise<string>;

    getProxyAdmin(
      proxy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getProxyImplementation(
      proxy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<string>;

    getRiskPool(overrides?: CallOverrides): Promise<string>;

    getRiskPoolCore(overrides?: CallOverrides): Promise<string>;

    getRiskPoolManager(overrides?: CallOverrides): Promise<string>;

    owner(overrides?: CallOverrides): Promise<string>;

    renounceOwnership(overrides?: CallOverrides): Promise<void>;

    setAddress(
      key: PromiseOrValue<BytesLike>,
      newAddress: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setFeeDistributor(
      newFeeDistributor: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setParametersProvider(
      newParametersProvider: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPremiumEngine(
      newPremiumEngine: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setPriceOracle(
      newPriceOracle: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRiskPool(
      newRiskPool: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRiskPoolCore(
      newRiskPoolCore: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    setRiskPoolManager(
      newRiskPoolManager: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgrade(
      proxy: PromiseOrValue<string>,
      implementation: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<void>;

    upgradeAndCall(
      proxy: PromiseOrValue<string>,
      implementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<void>;
  };

  filters: {
    "AddressSet(bytes32,address,address)"(
      key?: PromiseOrValue<BytesLike> | null,
      oldAddress?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null
    ): AddressSetEventFilter;
    AddressSet(
      key?: PromiseOrValue<BytesLike> | null,
      oldAddress?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null
    ): AddressSetEventFilter;

    "FeeDistributorUpdated(address,address)"(
      oldAddress?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null
    ): FeeDistributorUpdatedEventFilter;
    FeeDistributorUpdated(
      oldAddress?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null
    ): FeeDistributorUpdatedEventFilter;

    "OwnershipTransferred(address,address)"(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: PromiseOrValue<string> | null,
      newOwner?: PromiseOrValue<string> | null
    ): OwnershipTransferredEventFilter;

    "ParametersProviderUpdated(address,address)"(
      oldAddress?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null
    ): ParametersProviderUpdatedEventFilter;
    ParametersProviderUpdated(
      oldAddress?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null
    ): ParametersProviderUpdatedEventFilter;

    "PremiumEngineUpdated(address,address)"(
      oldAddress?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null
    ): PremiumEngineUpdatedEventFilter;
    PremiumEngineUpdated(
      oldAddress?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null
    ): PremiumEngineUpdatedEventFilter;

    "PriceOracleUpdated(address,address)"(
      oldAddress?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null
    ): PriceOracleUpdatedEventFilter;
    PriceOracleUpdated(
      oldAddress?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null
    ): PriceOracleUpdatedEventFilter;

    "RiskPoolCoreUpdated(address,address)"(
      oldAddress?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null
    ): RiskPoolCoreUpdatedEventFilter;
    RiskPoolCoreUpdated(
      oldAddress?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null
    ): RiskPoolCoreUpdatedEventFilter;

    "RiskPoolManagerUpdated(address,address)"(
      oldAddress?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null
    ): RiskPoolManagerUpdatedEventFilter;
    RiskPoolManagerUpdated(
      oldAddress?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null
    ): RiskPoolManagerUpdatedEventFilter;

    "RiskPoolUpdated(address,address)"(
      oldAddress?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null
    ): RiskPoolUpdatedEventFilter;
    RiskPoolUpdated(
      oldAddress?: PromiseOrValue<string> | null,
      newAddress?: PromiseOrValue<string> | null
    ): RiskPoolUpdatedEventFilter;
  };

  estimateGas: {
    changeProxyAdmin(
      proxy: PromiseOrValue<string>,
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    getAddress(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getFeeDistributor(overrides?: CallOverrides): Promise<BigNumber>;

    getParametersProvider(overrides?: CallOverrides): Promise<BigNumber>;

    getPremiumEngine(overrides?: CallOverrides): Promise<BigNumber>;

    getPriceOracle(overrides?: CallOverrides): Promise<BigNumber>;

    getProxyAdmin(
      proxy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getProxyImplementation(
      proxy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<BigNumber>;

    getRiskPool(overrides?: CallOverrides): Promise<BigNumber>;

    getRiskPoolCore(overrides?: CallOverrides): Promise<BigNumber>;

    getRiskPoolManager(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setAddress(
      key: PromiseOrValue<BytesLike>,
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setFeeDistributor(
      newFeeDistributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setParametersProvider(
      newParametersProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPremiumEngine(
      newPremiumEngine: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setPriceOracle(
      newPriceOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRiskPool(
      newRiskPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRiskPoolCore(
      newRiskPoolCore: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    setRiskPoolManager(
      newRiskPoolManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgrade(
      proxy: PromiseOrValue<string>,
      implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;

    upgradeAndCall(
      proxy: PromiseOrValue<string>,
      implementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    changeProxyAdmin(
      proxy: PromiseOrValue<string>,
      newAdmin: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    getAddress(
      key: PromiseOrValue<BytesLike>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getFeeDistributor(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getParametersProvider(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getPremiumEngine(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getPriceOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getProxyAdmin(
      proxy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getProxyImplementation(
      proxy: PromiseOrValue<string>,
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    getRiskPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRiskPoolCore(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRiskPoolManager(
      overrides?: CallOverrides
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceOwnership(
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setAddress(
      key: PromiseOrValue<BytesLike>,
      newAddress: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setFeeDistributor(
      newFeeDistributor: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setParametersProvider(
      newParametersProvider: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPremiumEngine(
      newPremiumEngine: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setPriceOracle(
      newPriceOracle: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRiskPool(
      newRiskPool: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRiskPoolCore(
      newRiskPoolCore: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    setRiskPoolManager(
      newRiskPoolManager: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgrade(
      proxy: PromiseOrValue<string>,
      implementation: PromiseOrValue<string>,
      overrides?: Overrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;

    upgradeAndCall(
      proxy: PromiseOrValue<string>,
      implementation: PromiseOrValue<string>,
      data: PromiseOrValue<BytesLike>,
      overrides?: PayableOverrides & { from?: PromiseOrValue<string> }
    ): Promise<PopulatedTransaction>;
  };
}
