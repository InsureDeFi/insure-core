/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../../common";
import type { Errors, ErrorsInterface } from "../../../contracts/lib/Errors";

const _abi = [
  {
    inputs: [],
    name: "AssetAlreadyInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "CallerNotPool",
    type: "error",
  },
  {
    inputs: [],
    name: "CoverTooSmall",
    type: "error",
  },
  {
    inputs: [],
    name: "Freezed",
    type: "error",
  },
  {
    inputs: [],
    name: "IneligiblePolicy",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidDuration",
    type: "error",
  },
  {
    inputs: [],
    name: "InvalidRate",
    type: "error",
  },
  {
    inputs: [],
    name: "NotOwner",
    type: "error",
  },
  {
    inputs: [],
    name: "NotOwnerOrPoolManager",
    type: "error",
  },
  {
    inputs: [],
    name: "PolicyDoesNotExists",
    type: "error",
  },
  {
    inputs: [],
    name: "PolicyExpired",
    type: "error",
  },
  {
    inputs: [],
    name: "PolicyUtilized",
    type: "error",
  },
  {
    inputs: [],
    name: "UnlockBeforeExpiry",
    type: "error",
  },
  {
    inputs: [],
    name: "UnsupportedAsset",
    type: "error",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
];

const _bytecode =
  "0x60566037600b82828239805160001a607314602a57634e487b7160e01b600052600060045260246000fd5b30600052607381538281f3fe73000000000000000000000000000000000000000030146080604052600080fdfea26469706673582212209f060fb390ee70c116fb4bd60eec514d0689ab6cf1dce1d7ebc106aeab283a1664736f6c63430008110033";

type ErrorsConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: ErrorsConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Errors__factory extends ContractFactory {
  constructor(...args: ErrorsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Errors> {
    return super.deploy(overrides || {}) as Promise<Errors>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Errors {
    return super.attach(address) as Errors;
  }
  override connect(signer: Signer): Errors__factory {
    return super.connect(signer) as Errors__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): ErrorsInterface {
    return new utils.Interface(_abi) as ErrorsInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Errors {
    return new Contract(address, _abi, signerOrProvider) as Errors;
  }
}
