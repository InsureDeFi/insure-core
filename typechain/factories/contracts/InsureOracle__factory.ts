/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  InsureOracle,
  InsureOracleInterface,
} from "../../contracts/InsureOracle";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "ZeroAddress",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "address",
        name: "previousAdmin",
        type: "address",
      },
      {
        indexed: false,
        internalType: "address",
        name: "newAdmin",
        type: "address",
      },
    ],
    name: "AdminChanged",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "beacon",
        type: "address",
      },
    ],
    name: "BeaconUpgraded",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "address",
        name: "implementation",
        type: "address",
      },
    ],
    name: "Upgraded",
    type: "event",
  },
  {
    inputs: [
      {
        internalType: "string[]",
        name: "assets",
        type: "string[]",
      },
    ],
    name: "getMultiPrices",
    outputs: [
      {
        internalType: "uint256[]",
        name: "",
        type: "uint256[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "asset",
        type: "string",
      },
    ],
    name: "getPrice",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract AccessController",
        name: "accessController_",
        type: "address",
      },
      {
        internalType: "contract IStdReference",
        name: "ref_",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "proxiableUUID",
    outputs: [
      {
        internalType: "bytes32",
        name: "",
        type: "bytes32",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "ref",
    outputs: [
      {
        internalType: "contract IStdReference",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract IStdReference",
        name: "ref_",
        type: "address",
      },
    ],
    name: "setRef",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
    ],
    name: "upgradeTo",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "address",
        name: "newImplementation",
        type: "address",
      },
      {
        internalType: "bytes",
        name: "data",
        type: "bytes",
      },
    ],
    name: "upgradeToAndCall",
    outputs: [],
    stateMutability: "payable",
    type: "function",
  },
];

const _bytecode =
  "0x60a06040523060805234801561001457600080fd5b5061001d610022565b6100e2565b600054610100900460ff161561008e5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100e0576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b608051611b17610119600039600081816101d30152818161028801528181610545015281816105f501526107e10152611b176000f3fe60806040526004361061007b5760003560e01c8063524f38891161004e578063524f38891461012c57806352d1902d1461015a57806353db89131461016f5780636bc855cc1461019c57600080fd5b806321a78f68146100805780633659cfe6146100d7578063485cc955146100f95780634f1ef28614610119575b600080fd5b34801561008c57600080fd5b506065546100ad9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b3480156100e357600080fd5b506100f76100f236600461144b565b6101bc565b005b34801561010557600080fd5b506100f7610114366004611468565b610390565b6100f761012736600461151f565b61052e565b34801561013857600080fd5b5061014c6101473660046115e5565b6106ee565b6040519081526020016100ce565b34801561016657600080fd5b5061014c6107c7565b34801561017b57600080fd5b5061018f61018a366004611657565b6108b3565b6040516100ce91906116ba565b3480156101a857600080fd5b506100f76101b736600461144b565b610ace565b73ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000163003610286576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c000000000000000000000000000000000000000060648201526084015b60405180910390fd5b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff166102c5610b67565b73ffffffffffffffffffffffffffffffffffffffff1614610368576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161027d565b61037181610ba7565b6040805160008082526020820190925261038d91839190610c3b565b50565b600054610100900460ff16158080156103b05750600054600160ff909116105b806103ca5750303b1580156103ca575060005460ff166001145b610456576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840161027d565b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0016600117905580156104b457600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b6104bd83610e3a565b6104c682610eda565b801561052957600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b505050565b73ffffffffffffffffffffffffffffffffffffffff7f00000000000000000000000000000000000000000000000000000000000000001630036105f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f64656c656761746563616c6c0000000000000000000000000000000000000000606482015260840161027d565b7f000000000000000000000000000000000000000000000000000000000000000073ffffffffffffffffffffffffffffffffffffffff16610632610b67565b73ffffffffffffffffffffffffffffffffffffffff16146106d5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602c60248201527f46756e6374696f6e206d7573742062652063616c6c6564207468726f7567682060448201527f6163746976652070726f78790000000000000000000000000000000000000000606482015260840161027d565b6106de82610ba7565b6106ea82826001610c3b565b5050565b606554604080518082018252600381527f5553440000000000000000000000000000000000000000000000000000000000602082015290517f65555bcc000000000000000000000000000000000000000000000000000000008152600092839273ffffffffffffffffffffffffffffffffffffffff909116916365555bcc9161077d91889188916004016117b5565b606060405180830381865afa15801561079a573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107be9190611841565b51949350505050565b60003073ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461088e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603860248201527f555550535570677261646561626c653a206d757374206e6f742062652063616c60448201527f6c6564207468726f7567682064656c656761746563616c6c0000000000000000606482015260840161027d565b507f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc90565b60608160008167ffffffffffffffff8111156108d1576108d16114a1565b60405190808252806020026020018201604052801561090457816020015b60608152602001906001900390816108ef5790505b50905060005b8281101561096d576040518060400160405280600381526020017f555344000000000000000000000000000000000000000000000000000000000081525082828151811061095a5761095a61185d565b602090810291909101015260010161090a565b506065546040517fe42a071b00000000000000000000000000000000000000000000000000000000815260009173ffffffffffffffffffffffffffffffffffffffff169063e42a071b906109c9908990899087906004016118e1565b600060405180830381865afa1580156109e6573d6000803e3d6000fd5b505050506040513d6000823e601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201604052610a2c91908101906119c2565b905060008367ffffffffffffffff811115610a4957610a496114a1565b604051908082528060200260200182016040528015610a72578160200160208202803683370190505b50905060005b84811015610ac357828181518110610a9257610a9261185d565b602002602001015160000151828281518110610ab057610ab061185d565b6020908102919091010152600101610a78565b509695505050505050565b6000610ad8610f6e565b6040517f12d9a6ad0000000000000000000000000000000000000000000000000000000081526004810183905233602482015273ffffffffffffffffffffffffffffffffffffffff91909116906312d9a6ad9060440160006040518083038186803b158015610b4657600080fd5b505afa158015610b5a573d6000803e3d6000fd5b505050506106ea82610eda565b60007f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5b5473ffffffffffffffffffffffffffffffffffffffff16919050565b6000610bb1610f6e565b6040517f12d9a6ad0000000000000000000000000000000000000000000000000000000081526004810183905233602482015273ffffffffffffffffffffffffffffffffffffffff91909116906312d9a6ad9060440160006040518083038186803b158015610c1f57600080fd5b505afa158015610c33573d6000803e3d6000fd5b505050505050565b7f4910fdfa16fed3260ed0e7147f7cc6da11a60208b5b9406d12a635614ffd91435460ff1615610c6e5761052983610f96565b8273ffffffffffffffffffffffffffffffffffffffff166352d1902d6040518163ffffffff1660e01b8152600401602060405180830381865afa925050508015610cf3575060408051601f3d9081017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0168201909252610cf091810190611a72565b60015b610d7f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f45524331393637557067726164653a206e657720696d706c656d656e7461746960448201527f6f6e206973206e6f742055555053000000000000000000000000000000000000606482015260840161027d565b7f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc8114610e2e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602960248201527f45524331393637557067726164653a20756e737570706f727465642070726f7860448201527f6961626c65555549440000000000000000000000000000000000000000000000606482015260840161027d565b506105298383836110a3565b600054610100900460ff16610ed1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161027d565b61038d816110ce565b73ffffffffffffffffffffffffffffffffffffffff8116610f27576040517fd92e233d00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b606580547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60007f3ff07d6b238084e39fc5d050e304626ccf5b5ccb8f457170664beef2c5e4919a610b8b565b73ffffffffffffffffffffffffffffffffffffffff81163b61103a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602d60248201527f455243313936373a206e657720696d706c656d656e746174696f6e206973206e60448201527f6f74206120636f6e747261637400000000000000000000000000000000000000606482015260840161027d565b807f360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc5b80547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff9290921691909117905550565b6110ac8361116e565b6000825111806110b95750805b15610529576110c883836111bb565b50505050565b600054610100900460ff16611165576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201527f6e697469616c697a696e67000000000000000000000000000000000000000000606482015260840161027d565b61038d816112fa565b61117781610f96565b60405173ffffffffffffffffffffffffffffffffffffffff8216907fbc7cd75a20ee27fd9adebab32041f755214dbc6bffa90cc0225b39da2e5c2d3b90600090a250565b606073ffffffffffffffffffffffffffffffffffffffff83163b611261576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602660248201527f416464726573733a2064656c65676174652063616c6c20746f206e6f6e2d636f60448201527f6e74726163740000000000000000000000000000000000000000000000000000606482015260840161027d565b6000808473ffffffffffffffffffffffffffffffffffffffff16846040516112899190611a8b565b600060405180830381855af49150503d80600081146112c4576040519150601f19603f3d011682016040523d82523d6000602084013e6112c9565b606091505b50915091506112f18282604051806060016040528060278152602001611abb602791396113c5565b95945050505050565b73ffffffffffffffffffffffffffffffffffffffff81163b61139e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152603960248201527f416363657373526573747269637465643a204e65772061636365737320636f6e60448201527f74726f6c6c6572206973206e6f74206120636f6e747261637400000000000000606482015260840161027d565b807f3ff07d6b238084e39fc5d050e304626ccf5b5ccb8f457170664beef2c5e4919a61105d565b606083156113d45750816113de565b6113de83836113e5565b9392505050565b8151156113f55781518083602001fd5b806040517f08c379a000000000000000000000000000000000000000000000000000000000815260040161027d9190611aa7565b73ffffffffffffffffffffffffffffffffffffffff8116811461038d57600080fd5b60006020828403121561145d57600080fd5b81356113de81611429565b6000806040838503121561147b57600080fd5b823561148681611429565b9150602083013561149681611429565b809150509250929050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b604051601f82017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe016810167ffffffffffffffff81118282101715611517576115176114a1565b604052919050565b6000806040838503121561153257600080fd5b823561153d81611429565b915060208381013567ffffffffffffffff8082111561155b57600080fd5b818601915086601f83011261156f57600080fd5b813581811115611581576115816114a1565b6115b1847fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116016114d0565b915080825287848285010111156115c757600080fd5b80848401858401376000848284010152508093505050509250929050565b600080602083850312156115f857600080fd5b823567ffffffffffffffff8082111561161057600080fd5b818501915085601f83011261162457600080fd5b81358181111561163357600080fd5b86602082850101111561164557600080fd5b60209290920196919550909350505050565b6000806020838503121561166a57600080fd5b823567ffffffffffffffff8082111561168257600080fd5b818501915085601f83011261169657600080fd5b8135818111156116a557600080fd5b8660208260051b850101111561164557600080fd5b6020808252825182820181905260009190848201906040850190845b818110156116f2578351835292840192918401916001016116d6565b50909695505050505050565b8183528181602085013750600060208284010152600060207fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0601f840116840101905092915050565b60005b8381101561176257818101518382015260200161174a565b50506000910152565b60008151808452611783816020860160208601611747565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6040815260006117c96040830185876116fe565b82810360208401526117db818561176b565b9695505050505050565b6000606082840312156117f757600080fd5b6040516060810181811067ffffffffffffffff8211171561181a5761181a6114a1565b80604052508091508251815260208301516020820152604083015160408201525092915050565b60006060828403121561185357600080fd5b6113de83836117e5565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b600081518084526020808501808196508360051b8101915082860160005b858110156118d45782840389526118c284835161176b565b988501989350908401906001016118aa565b5091979650505050505050565b6040808252810183905260006060600585901b8301810190830186835b878110156119ad577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffa086850301835281357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18a360301811261195f57600080fd5b8901602081810191359067ffffffffffffffff82111561197e57600080fd5b81360383131561198d57600080fd5b6119988783856116fe565b965094850194939093019250506001016118fe565b50505082810360208401526117db818561188c565b600060208083850312156119d557600080fd5b825167ffffffffffffffff808211156119ed57600080fd5b818501915085601f830112611a0157600080fd5b815181811115611a1357611a136114a1565b611a21848260051b016114d0565b81815284810192506060918202840185019188831115611a4057600080fd5b938501935b82851015611a6657611a5789866117e5565b84529384019392850192611a45565b50979650505050505050565b600060208284031215611a8457600080fd5b5051919050565b60008251611a9d818460208701611747565b9190910192915050565b6020815260006113de602083018461176b56fe416464726573733a206c6f772d6c6576656c2064656c65676174652063616c6c206661696c6564a2646970667358221220be1f5a02c1d5680ade9e48e6a6510e1fa340a752ab5bdb61e8988c0f98bdd0bb64736f6c63430008110033";

type InsureOracleConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: InsureOracleConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class InsureOracle__factory extends ContractFactory {
  constructor(...args: InsureOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<InsureOracle> {
    return super.deploy(overrides || {}) as Promise<InsureOracle>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): InsureOracle {
    return super.attach(address) as InsureOracle;
  }
  override connect(signer: Signer): InsureOracle__factory {
    return super.connect(signer) as InsureOracle__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): InsureOracleInterface {
    return new utils.Interface(_abi) as InsureOracleInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): InsureOracle {
    return new Contract(address, _abi, signerOrProvider) as InsureOracle;
  }
}
