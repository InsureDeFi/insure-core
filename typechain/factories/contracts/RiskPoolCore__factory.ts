/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type {
  RiskPoolCore,
  RiskPoolCoreInterface,
} from "../../contracts/RiskPoolCore";

const _abi = [
  {
    inputs: [],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "RiskPoolCore__AssetAlreadyInitialized",
    type: "error",
  },
  {
    inputs: [],
    name: "RiskPoolCore__NotPoolManager",
    type: "error",
  },
  {
    inputs: [],
    name: "RiskPoolCore__UnlockBeforeExpiry",
    type: "error",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: "uint256",
        name: "assetId",
        type: "uint256",
      },
      {
        indexed: false,
        internalType: "string",
        name: "asset",
        type: "string",
      },
    ],
    name: "AssetInitialized",
    type: "event",
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: "uint8",
        name: "version",
        type: "uint8",
      },
    ],
    name: "Initialized",
    type: "event",
  },
  {
    inputs: [],
    name: "CORE_REVISION",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "addressesProvider",
    outputs: [
      {
        internalType: "contract AddressesProvider",
        name: "",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "",
        type: "string",
      },
    ],
    name: "assetIds",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "getAssets",
    outputs: [
      {
        internalType: "string[]",
        name: "",
        type: "string[]",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "policyId",
        type: "uint256",
      },
    ],
    name: "getPolicy",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "premium",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "payOutAmount",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "assetValue",
            type: "uint256",
          },
          {
            internalType: "uint256",
            name: "endTime",
            type: "uint256",
          },
          {
            internalType: "address",
            name: "insured",
            type: "address",
          },
          {
            internalType: "uint8",
            name: "threshold",
            type: "uint8",
          },
          {
            internalType: "bool",
            name: "utilized",
            type: "bool",
          },
          {
            internalType: "string",
            name: "asset",
            type: "string",
          },
        ],
        internalType: "struct CoreLibrary.Policy",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "assetSymbol",
        type: "string",
      },
    ],
    name: "initAsset",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "contract AddressesProvider",
        name: "_addressesProvider",
        type: "address",
      },
    ],
    name: "initialize",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [],
    name: "isActive",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "isFreezed",
    outputs: [
      {
        internalType: "bool",
        name: "",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "lockedAssets",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "policyCount",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "policyId",
        type: "uint256",
      },
    ],
    name: "updateStateOnApplyCover",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "string",
        name: "assetSymbol",
        type: "string",
      },
      {
        internalType: "uint256",
        name: "endTime",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "premium",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "payOutAmount",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "currentAssetPrice",
        type: "uint256",
      },
      {
        internalType: "uint8",
        name: "payOutThreshold",
        type: "uint8",
      },
      {
        internalType: "address",
        name: "reciever",
        type: "address",
      },
    ],
    name: "updateStateOnPolicy",
    outputs: [
      {
        internalType: "uint256",
        name: "policyId",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "timestamp",
        type: "uint256",
      },
    ],
    name: "updateStateOnUnlock",
    outputs: [
      {
        internalType: "uint256",
        name: "unlocksAt",
        type: "uint256",
      },
      {
        internalType: "uint256",
        name: "unlockAmount",
        type: "uint256",
      },
    ],
    stateMutability: "nonpayable",
    type: "function",
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b5061001961001e565b6100de565b600054610100900460ff161561008a5760405162461bcd60e51b815260206004820152602760248201527f496e697469616c697a61626c653a20636f6e747261637420697320696e697469604482015266616c697a696e6760c81b606482015260840160405180910390fd5b60005460ff90811610156100dc576000805460ff191660ff9081179091556040519081527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b565b611b30806100ed6000396000f3fe608060405234801561001057600080fd5b50600436106100ea5760003560e01c806367e4ac2c1161008c578063c4d66de811610066578063c4d66de8146101f2578063c72c4d1014610205578063cf3fb2d514610250578063de54d4291461026357600080fd5b806367e4ac2c146101a357806389995859146101b8578063b9469e1a146101e057600080fd5b8063274fc72a116100c8578063274fc72a1461013a5780632b07fce3146101435780634141f9e9146101635780634889ca901461017857600080fd5b80630c7de4e9146100ef57806317de3e3a1461010a57806322f3e2d41461011d575b600080fd5b6100f7600181565b6040519081526020015b60405180910390f35b6100f7610118366004611425565b61026c565b60035461012a9060ff1681565b6040519015158152602001610101565b6100f760015481565b6101566101513660046114b6565b61052c565b604051610101919061153a565b6101766101713660046114b6565b6106e6565b005b6100f76101863660046115d5565b805160208183018101805160058252928201919093012091525481565b6101ab61087b565b604051610101919061160a565b6101cb6101c63660046114b6565b610954565b60408051928352602083019190915201610101565b60035461012a90610100900460ff1681565b61017661020036600461168a565b610ac6565b60005461022b9062010000900473ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610101565b61017661025e3660046116ae565b610cc5565b6100f760025481565b60008060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663073bf33d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156102d557600080fd5b505afa1580156102e9573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061030d9190611720565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610371576040517f9df7bcda00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b8460016000828254610383919061176c565b90915550506002805490600061039883611784565b9190505590506040518061012001604052808281526020018781526020018681526020018581526020018881526020018373ffffffffffffffffffffffffffffffffffffffff1681526020018460ff1681526020016000151581526020018981525060066000838152602001908152602001600020600082015181600001556020820151816001015560408201518160020155606082015181600301556080820151816004015560a08201518160050160006101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555060c08201518160050160146101000a81548160ff021916908360ff16021790555060e08201518160050160156101000a81548160ff0219169083151502179055506101008201518160060190805190602001906104e49291906111fb565b5090505060006104f5886001610eca565b90508560076000838152602001908152602001600020600082825461051a919061176c565b90915550919998505050505050505050565b6105966040518061012001604052806000815260200160008152602001600081526020016000815260200160008152602001600073ffffffffffffffffffffffffffffffffffffffff168152602001600060ff168152602001600015158152602001606081525090565b600082815260066020818152604092839020835161012081018552815481526001820154928101929092526002810154938201939093526003830154606082015260048301546080820152600583015473ffffffffffffffffffffffffffffffffffffffff811660a083015260ff740100000000000000000000000000000000000000008204811660c0840152750100000000000000000000000000000000000000000090910416151560e082015290820180549192916101008401919061065d906117bd565b80601f0160208091040260200160405190810160405280929190818152602001828054610689906117bd565b80156106d65780601f106106ab576101008083540402835291602001916106d6565b820191906000526020600020905b8154815290600101906020018083116106b957829003601f168201915b5050505050815250509050919050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663073bf33d6040518163ffffffff1660e01b815260040160206040518083038186803b15801561074e57600080fd5b505afa158015610762573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906107869190611720565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff16146107ea576040517f9df7bcda00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60008181526006602052604081206005810180547fffffffffffffffffffff00ffffffffffffffffffffffffffffffffffffffffff167501000000000000000000000000000000000000000000179055600481015490919061084d906001610eca565b6002909201805460018054919091039055546000928352600760205260409092208054929092039091555050565b60606004805480602002602001604051908101604052809291908181526020016000905b8282101561094b5783829060005260206000200180546108be906117bd565b80601f01602080910402602001604051908101604052809291908181526020018280546108ea906117bd565b80156109375780601f1061090c57610100808354040283529160200191610937565b820191906000526020600020905b81548152906001019060200180831161091a57829003601f168201915b50505050508152602001906001019061089f565b50505050905090565b600080600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663073bf33d6040518163ffffffff1660e01b815260040160206040518083038186803b1580156109bf57600080fd5b505afa1580156109d3573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109f79190611720565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610a5b576040517f9df7bcda00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b610a66836000610eca565b915042821115610aa2576040517f43b396f700000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b50600081815260076020526040812080546001805482900390559190559092909150565b600054610100900460ff1615808015610ae65750600054600160ff909116105b80610b005750303b158015610b00575060005460ff166001145b610b90576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a6564000000000000000000000000000000000000606482015260840160405180910390fd5b600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610bee57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff166101001790555b600080547fffffffffffffffffffff0000000000000000000000000000000000000000ffff166201000073ffffffffffffffffffffffffffffffffffffffff851602179055600380547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff001660011790558015610cc157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff169055604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb38474024989060200160405180910390a15b5050565b600060029054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663f4c5a81e6040518163ffffffff1660e01b815260040160206040518083038186803b158015610d2d57600080fd5b505afa158015610d41573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610d659190611720565b73ffffffffffffffffffffffffffffffffffffffff163373ffffffffffffffffffffffffffffffffffffffff1614610dc9576040517f9df7bcda00000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60058282604051610ddb929190611811565b908152602001604051809103902054600014610e23576040517f04aebac000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60048054600181018255600091909152610e60907f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b01838361127f565b506004546040518190600590610e799086908690611811565b908152602001604051809103902081905550807f9a928c810f8c4b81ed3610b4de5c79be654fd518462512126000619ed07b68898484604051610ebd929190611821565b60405180910390a2505050565b6000806000806000610edb87610f01565b91945092509050610ef68383610ef1898561176c565b610f27565b979650505050505050565b60008080610f1a610f15620151808661189d565b610f4a565b9196909550909350915050565b600062015180610f388585856110be565b610f4291906118b1565b949350505050565b60008080838162253d8c610f618362010bd96118ee565b610f6b91906118ee565b9050600062023ab1610f7e836004611962565b610f889190611a1e565b90506004610f998262023ab1611962565b610fa49060036118ee565b610fae9190611a1e565b610fb89083611a86565b9150600062164b09610fcb8460016118ee565b610fd790610fa0611962565b610fe19190611a1e565b90506004610ff1826105b5611962565b610ffb9190611a1e565b6110059084611a86565b61101090601f6118ee565b9250600061098f611022856050611962565b61102c9190611a1e565b90506000605061103e8361098f611962565b6110489190611a1e565b6110529086611a86565b905061105f600b83611a1e565b945061106c85600c611962565b6110778360026118ee565b6110819190611a86565b91508483611090603187611a86565b61109b906064611962565b6110a591906118ee565b6110af91906118ee565b9a919950975095505050505050565b60006107b28410156110cf57600080fd5b838383600062253d8c60046064600c6110e9600e88611a86565b6110f39190611a1e565b6110ff886113246118ee565b61110991906118ee565b6111139190611a1e565b61111e906003611962565b6111289190611a1e565b600c80611136600e88611a86565b6111409190611a1e565b61114b90600c611962565b611156600288611a86565b6111609190611a86565b61116c9061016f611962565b6111769190611a1e565b6004600c611185600e89611a86565b61118f9190611a1e565b61119b896112c06118ee565b6111a591906118ee565b6111b1906105b5611962565b6111bb9190611a1e565b6111c7617d4b87611a86565b6111d191906118ee565b6111db91906118ee565b6111e59190611a86565b6111ef9190611a86565b98975050505050505050565b828054611207906117bd565b90600052602060002090601f016020900481019282611229576000855561126f565b82601f1061124257805160ff191683800117855561126f565b8280016001018555821561126f579182015b8281111561126f578251825591602001919060010190611254565b5061127b929150611311565b5090565b82805461128b906117bd565b90600052602060002090601f0160209004810192826112ad576000855561126f565b82601f106112e4578280017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0082351617855561126f565b8280016001018555821561126f579182015b8281111561126f5782358255916020019190600101906112f6565b5b8082111561127b5760008155600101611312565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b600082601f83011261136657600080fd5b813567ffffffffffffffff8082111561138157611381611326565b604051601f83017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0908116603f011681019082821181831017156113c7576113c7611326565b816040528381528660208588010111156113e057600080fd5b836020870160208301376000602085830101528094505050505092915050565b73ffffffffffffffffffffffffffffffffffffffff8116811461142257600080fd5b50565b600080600080600080600060e0888a03121561144057600080fd5b873567ffffffffffffffff81111561145757600080fd5b6114638a828b01611355565b9750506020880135955060408801359450606088013593506080880135925060a088013560ff8116811461149657600080fd5b915060c08801356114a681611400565b8091505092959891949750929550565b6000602082840312156114c857600080fd5b5035919050565b6000815180845260005b818110156114f5576020818501810151868301820152016114d9565b81811115611507576000602083870101525b50601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169290920160200192915050565b6020815281516020820152602082015160408201526040820151606082015260608201516080820152608082015160a0820152600060a083015161159660c084018273ffffffffffffffffffffffffffffffffffffffff169052565b5060c083015160ff811660e08401525060e08301516101006115bb8185018315159052565b840151610120848101529050610f426101408401826114cf565b6000602082840312156115e757600080fd5b813567ffffffffffffffff8111156115fe57600080fd5b610f4284828501611355565b6000602080830181845280855180835260408601915060408160051b870101925083870160005b8281101561167d577fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffc088860301845261166b8583516114cf565b94509285019290850190600101611631565b5092979650505050505050565b60006020828403121561169c57600080fd5b81356116a781611400565b9392505050565b600080602083850312156116c157600080fd5b823567ffffffffffffffff808211156116d957600080fd5b818501915085601f8301126116ed57600080fd5b8135818111156116fc57600080fd5b86602082850101111561170e57600080fd5b60209290920196919550909350505050565b60006020828403121561173257600080fd5b81516116a781611400565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000821982111561177f5761177f61173d565b500190565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8214156117b6576117b661173d565b5060010190565b600181811c908216806117d157607f821691505b6020821081141561180b577f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b50919050565b8183823760009101908152919050565b60208152816020820152818360408301376000818301604090810191909152601f9092017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0160101919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601260045260246000fd5b6000826118ac576118ac61186e565b500490565b6000817fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff04831182151516156118e9576118e961173d565b500290565b6000808212827f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff038413811516156119285761192861173d565b827f800000000000000000000000000000000000000000000000000000000000000003841281161561195c5761195c61173d565b50500190565b60007f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6000841360008413858304851182821616156119a3576119a361173d565b7f800000000000000000000000000000000000000000000000000000000000000060008712868205881281841616156119de576119de61173d565b600087129250878205871284841616156119fa576119fa61173d565b87850587128184161615611a1057611a1061173d565b505050929093029392505050565b600082611a2d57611a2d61186e565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff83147f800000000000000000000000000000000000000000000000000000000000000083141615611a8157611a8161173d565b500590565b6000808312837f800000000000000000000000000000000000000000000000000000000000000001831281151615611ac057611ac061173d565b837f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff018313811615611af457611af461173d565b5050039056fea2646970667358221220a9777e177343b803b0de8a6912254e29e1b20e557f77413f936b8dba247c700464736f6c63430008090033";

type RiskPoolCoreConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: RiskPoolCoreConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class RiskPoolCore__factory extends ContractFactory {
  constructor(...args: RiskPoolCoreConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<RiskPoolCore> {
    return super.deploy(overrides || {}) as Promise<RiskPoolCore>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): RiskPoolCore {
    return super.attach(address) as RiskPoolCore;
  }
  override connect(signer: Signer): RiskPoolCore__factory {
    return super.connect(signer) as RiskPoolCore__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): RiskPoolCoreInterface {
    return new utils.Interface(_abi) as RiskPoolCoreInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): RiskPoolCore {
    return new Contract(address, _abi, signerOrProvider) as RiskPoolCore;
  }
}
